// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngressPath ingress path
// swagger:model ingressPath
type IngressPath struct {

	// Path is matched against the path of an incoming request
	// Required: true
	// Min Length: 1
	Path string `json:"path"`

	// Specifies the port name of the service to expose
	// Required: true
	// Min Length: 1
	PortName string `json:"portName"`
}

// Validate validates this ingress path
func (m *IngressPath) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngressPath) validatePath(formats strfmt.Registry) error {

	if err := validate.RequiredString("path", "body", string(m.Path)); err != nil {
		return err
	}

	if err := validate.MinLength("path", "body", string(m.Path), 1); err != nil {
		return err
	}

	return nil
}

func (m *IngressPath) validatePortName(formats strfmt.Registry) error {

	if err := validate.RequiredString("portName", "body", string(m.PortName)); err != nil {
		return err
	}

	if err := validate.MinLength("portName", "body", string(m.PortName), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngressPath) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngressPath) UnmarshalBinary(b []byte) error {
	var res IngressPath
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
