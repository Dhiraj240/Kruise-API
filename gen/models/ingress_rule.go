// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngressRule ingress rule
// swagger:model ingressRule
type IngressRule struct {

	// Host is the fully qualified domain name of a network host, as defined by RFC 3986
	// Required: true
	// Min Length: 1
	Host *string `json:"host"`

	// Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request
	Path string `json:"path,omitempty"`

	// Specifies the name of the referenced service
	// Required: true
	// Min Length: 1
	ServiceName *string `json:"serviceName"`

	// Specifies the port of the referenced service
	// Required: true
	// Min Length: 1
	ServicePort *string `json:"servicePort"`
}

// Validate validates this ingress rule
func (m *IngressRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngressRule) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	if err := validate.MinLength("host", "body", string(*m.Host), 1); err != nil {
		return err
	}

	return nil
}

func (m *IngressRule) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	if err := validate.MinLength("serviceName", "body", string(*m.ServiceName), 1); err != nil {
		return err
	}

	return nil
}

func (m *IngressRule) validateServicePort(formats strfmt.Registry) error {

	if err := validate.Required("servicePort", "body", m.ServicePort); err != nil {
		return err
	}

	if err := validate.MinLength("servicePort", "body", string(*m.ServicePort), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngressRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngressRule) UnmarshalBinary(b []byte) error {
	var res IngressRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
