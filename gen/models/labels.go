// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Labels labels
// swagger:model labels
type Labels struct {

	// The environment to deploy to
	// Required: true
	// Min Length: 1
	// Enum: [Dev Stage Prod]
	Env string `json:"env"`

	// The region to deploy to
	// Required: true
	// Min Length: 1
	// Enum: [STL KCI BEL]
	Region string `json:"region"`

	// The name of the team or tenant
	// Required: true
	// Min Length: 1
	Team string `json:"team"`

	// The version or release name of the application
	// Required: true
	// Min Length: 1
	Version string `json:"version"`
}

// Validate validates this labels
func (m *Labels) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var labelsTypeEnvPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Dev","Stage","Prod"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelsTypeEnvPropEnum = append(labelsTypeEnvPropEnum, v)
	}
}

const (

	// LabelsEnvDev captures enum value "Dev"
	LabelsEnvDev string = "Dev"

	// LabelsEnvStage captures enum value "Stage"
	LabelsEnvStage string = "Stage"

	// LabelsEnvProd captures enum value "Prod"
	LabelsEnvProd string = "Prod"
)

// prop value enum
func (m *Labels) validateEnvEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, labelsTypeEnvPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Labels) validateEnv(formats strfmt.Registry) error {

	if err := validate.RequiredString("env", "body", string(m.Env)); err != nil {
		return err
	}

	if err := validate.MinLength("env", "body", string(m.Env), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvEnum("env", "body", m.Env); err != nil {
		return err
	}

	return nil
}

var labelsTypeRegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STL","KCI","BEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelsTypeRegionPropEnum = append(labelsTypeRegionPropEnum, v)
	}
}

const (

	// LabelsRegionSTL captures enum value "STL"
	LabelsRegionSTL string = "STL"

	// LabelsRegionKCI captures enum value "KCI"
	LabelsRegionKCI string = "KCI"

	// LabelsRegionBEL captures enum value "BEL"
	LabelsRegionBEL string = "BEL"
)

// prop value enum
func (m *Labels) validateRegionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, labelsTypeRegionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Labels) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	if err := validate.MinLength("region", "body", string(m.Region), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegionEnum("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *Labels) validateTeam(formats strfmt.Registry) error {

	if err := validate.RequiredString("team", "body", string(m.Team)); err != nil {
		return err
	}

	if err := validate.MinLength("team", "body", string(m.Team), 1); err != nil {
		return err
	}

	return nil
}

func (m *Labels) validateVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("version", "body", string(m.Version)); err != nil {
		return err
	}

	if err := validate.MinLength("version", "body", string(m.Version), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Labels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Labels) UnmarshalBinary(b []byte) error {
	var res Labels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
