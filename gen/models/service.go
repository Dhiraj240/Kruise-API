// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
// swagger:model service
type Service struct {

	// The name of the service
	// Required: true
	// Min Length: 1
	Name string `json:"name"`

	// ports
	// Required: true
	Ports []*ServicePort `json:"ports"`

	// The tier for the service
	// Required: true
	// Min Length: 1
	// Enum: [Frontend API Backend Cache]
	Tier string `json:"tier"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Service) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serviceTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Frontend","API","Backend","Cache"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeTierPropEnum = append(serviceTypeTierPropEnum, v)
	}
}

const (

	// ServiceTierFrontend captures enum value "Frontend"
	ServiceTierFrontend string = "Frontend"

	// ServiceTierAPI captures enum value "API"
	ServiceTierAPI string = "API"

	// ServiceTierBackend captures enum value "Backend"
	ServiceTierBackend string = "Backend"

	// ServiceTierCache captures enum value "Cache"
	ServiceTierCache string = "Cache"
)

// prop value enum
func (m *Service) validateTierEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceTypeTierPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Service) validateTier(formats strfmt.Registry) error {

	if err := validate.RequiredString("tier", "body", string(m.Tier)); err != nil {
		return err
	}

	if err := validate.MinLength("tier", "body", string(m.Tier), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", m.Tier); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
