// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeMount volume mount
// swagger:model volumeMount
type VolumeMount struct {

	// Path within the container at which the volume should be mounted
	// Min Length: 1
	MountPath string `json:"mountPath,omitempty"`

	// The name of the volume to mount
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// Mounted read-only if true, read-write otherwise
	ReadOnly bool `json:"readOnly,omitempty"`

	// Path within the volume from which the container's volume should be mounted
	SubPath *string `json:"subPath,omitempty"`

	// The type of the volume mount (ConfigMap, PersistentVolume, or Secret)
	// Min Length: 1
	// Enum: [ConfigMap PersistentVolume Secret]
	Type string `json:"type,omitempty"`
}

// Validate validates this volume mount
func (m *VolumeMount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMount) validateMountPath(formats strfmt.Registry) error {

	if swag.IsZero(m.MountPath) { // not required
		return nil
	}

	if err := validate.MinLength("mountPath", "body", string(m.MountPath), 1); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMount) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

var volumeMountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ConfigMap","PersistentVolume","Secret"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeMountTypeTypePropEnum = append(volumeMountTypeTypePropEnum, v)
	}
}

const (

	// VolumeMountTypeConfigMap captures enum value "ConfigMap"
	VolumeMountTypeConfigMap string = "ConfigMap"

	// VolumeMountTypePersistentVolume captures enum value "PersistentVolume"
	VolumeMountTypePersistentVolume string = "PersistentVolume"

	// VolumeMountTypeSecret captures enum value "Secret"
	VolumeMountTypeSecret string = "Secret"
)

// prop value enum
func (m *VolumeMount) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeMountTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeMount) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MinLength("type", "body", string(m.Type), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMount) UnmarshalBinary(b []byte) error {
	var res VolumeMount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
