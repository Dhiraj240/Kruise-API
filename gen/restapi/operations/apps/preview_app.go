// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PreviewAppHandlerFunc turns a function with the right signature into a preview app handler
type PreviewAppHandlerFunc func(PreviewAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PreviewAppHandlerFunc) Handle(params PreviewAppParams) middleware.Responder {
	return fn(params)
}

// PreviewAppHandler interface for that can handle valid preview app params
type PreviewAppHandler interface {
	Handle(PreviewAppParams) middleware.Responder
}

// NewPreviewApp creates a new http.Handler for the preview app operation
func NewPreviewApp(ctx *middleware.Context, handler PreviewAppHandler) *PreviewApp {
	return &PreviewApp{Context: ctx, Handler: handler}
}

/*PreviewApp swagger:route POST /app/preview apps previewApp

Previews a new Kruise application

*/
type PreviewApp struct {
	Context *middleware.Context
	Handler PreviewAppHandler
}

func (o *PreviewApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPreviewAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
