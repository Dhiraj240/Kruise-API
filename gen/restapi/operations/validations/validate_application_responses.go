// Code generated by go-swagger; DO NOT EDIT.

package validations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "deploy-wizard/gen/models"
)

// ValidateApplicationOKCode is the HTTP code returned for type ValidateApplicationOK
const ValidateApplicationOKCode int = 200

/*ValidateApplicationOK validated

swagger:response validateApplicationOK
*/
type ValidateApplicationOK struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationResponse `json:"body,omitempty"`
}

// NewValidateApplicationOK creates ValidateApplicationOK with default headers values
func NewValidateApplicationOK() *ValidateApplicationOK {

	return &ValidateApplicationOK{}
}

// WithPayload adds the payload to the validate application o k response
func (o *ValidateApplicationOK) WithPayload(payload *models.ValidationResponse) *ValidateApplicationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the validate application o k response
func (o *ValidateApplicationOK) SetPayload(payload *models.ValidationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ValidateApplicationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ValidateApplicationBadRequestCode is the HTTP code returned for type ValidateApplicationBadRequest
const ValidateApplicationBadRequestCode int = 400

/*ValidateApplicationBadRequest Bad request

swagger:response validateApplicationBadRequest
*/
type ValidateApplicationBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewValidateApplicationBadRequest creates ValidateApplicationBadRequest with default headers values
func NewValidateApplicationBadRequest() *ValidateApplicationBadRequest {

	return &ValidateApplicationBadRequest{}
}

// WithPayload adds the payload to the validate application bad request response
func (o *ValidateApplicationBadRequest) WithPayload(payload string) *ValidateApplicationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the validate application bad request response
func (o *ValidateApplicationBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ValidateApplicationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ValidateApplicationDefault Internal server error

swagger:response validateApplicationDefault
*/
type ValidateApplicationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewValidateApplicationDefault creates ValidateApplicationDefault with default headers values
func NewValidateApplicationDefault(code int) *ValidateApplicationDefault {
	if code <= 0 {
		code = 500
	}

	return &ValidateApplicationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the validate application default response
func (o *ValidateApplicationDefault) WithStatusCode(code int) *ValidateApplicationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the validate application default response
func (o *ValidateApplicationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the validate application default response
func (o *ValidateApplicationDefault) WithPayload(payload *models.Error) *ValidateApplicationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the validate application default response
func (o *ValidateApplicationDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ValidateApplicationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
