# TODO: update property descriptions based on destination counterparts
# (kubernetes, argocd resources)

# TODO: formats for validating kubernetes names (service, deployment, etc.).
# DNS_LABEL, IANA_SVC_NAME

swagger: "2.0"

info:
  description: Kruise deployment wizard
  title: Kruise deployment wizard
  version: 0.0.1

consumes:
  - "application/json"

produces:
  - "application/json"

paths:
  /app/validation:
    post:
      tags:
        - validations
      operationId: validateApplication
      description: Validates the Kruise application
      parameters:
        - name: application
          in: body
          description: the application object
          required: true
          schema:
            type: object
      responses:
        200:
          description: validated
          schema:
            $ref: "#/definitions/validationResponse"
        400:
          $ref: "#/responses/BadRequest"
        default:
          $ref: "#/responses/InternalServerError"

  /app/preview:
    post:
      tags:
        - apps
      operationId: previewApp
      description: Previews a new Kruise application
      parameters:
        - name: application
          in: body
          description: The application to preview
          required: true
          schema:
            $ref: "#/definitions/application"
      produces:
        - "text/plain"
      responses:
        201:
          description: created
          schema:
            type: string
        400:
          $ref: "#/responses/BadRequest"
        default:
          $ref: "#/responses/InternalServerError"

  /app/release:
    post:
      tags:
        - apps
      operationId: releaseApp
      description: Generates a new Kruise application
      parameters:
        - name: application
          in: body
          description: The application to generate
          required: true
          schema:
            $ref: "#/definitions/application"
      responses:
        201:
          description: created
          schema:
            $ref: "#/definitions/validationResponse"
        400:
          description: invalid
          schema:
            $ref: "#/definitions/validationResponse"
        default:
          $ref: "#/responses/InternalServerError"

  /health:
    get:
      tags:
        - general
      operationId: getHealth
      description: Get the current health of the API
      responses:
        200:
          description: Get current health response
          schema:
            $ref: "#/definitions/healthStatus"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/error"

responses:
  BadRequest:
    description: Bad request
    schema:
      type: string

  InternalServerError:
    description: Internal server error
    schema:
      $ref: "#/definitions/error"

definitions:
  application:
    type: object
    properties:
      metadata:
        $ref: "#/definitions/metadata"
      spec:
        $ref: "#/definitions/spec"
    required:
      - metadata
      - spec

  metadata:
    type: object
    properties:
      name:
        type: string
        description: The name of the application
        minLength: 1
        x-nullable: false
      namespace:
        type: string
        description: The namespace to deploy to
        minLength: 1
        x-nullable: false
      labels:
        $ref: "#/definitions/labels"
        description: Arbitrary labels
    required:
      - name
      - namespace
      - labels

  labels:
    type: object
    properties:
      version:
        type: string
        description: The version or release name of the application
        minLength: 1
        x-nullable: false
      team:
        type: string
        description: The name of the team or tenant
        minLength: 1
        x-nullable: false
      env:
        type: string
        description: The environment to deploy to
        minLength: 1
        x-nullable: false
        # TODO: consider making environments configurable
        default: Dev
        enum:
          - Dev
          - Stage
          - Prod
      region:
        type: string
        description: The region to deploy to
        minLength: 1
        x-nullable: false
        # TODO: consider making regions configurable
        default: STL
        enum:
          - STL
          - KCI
          - BEL
    required:
      - version
      - team
      - env
      - region

  spec:
    type: object
    properties:
      destination:
        $ref: "#/definitions/destination"
      configMaps:
        type: array
        items:
          $ref: "#/definitions/configMap"
      persistentVolumes:
        type: array
        items:
          $ref: "#/definitions/persistentVolume"
      components:
        type: array
        items:
          $ref: "#/definitions/component"
    required:
      - destination
      - components

  destination:
    type: object
    properties:
      url:
        type: string
        description: The git repo URL
        minLength: 1
        x-nullable: false
        format: uri
      path:
        type: string
        description: The relative path to the manifests in the git repo
        minLength: 1
        x-nullable: false
        format: filepath
        default: "/"
      targetRevision:
        type: string
        description: Defines the commit, tag, or branch in which to sync the application to.
        minLength: 1
        x-nullable: false
        default: HEAD
    required:
      - url

  component:
    type: object
    properties:
      service:
        $ref: "#/definitions/service"
      ingresses:
        type: array
        items:
          $ref: "#/definitions/ingress"
      containers:
        type: array
        items:
          $ref: "#/definitions/container"
    required:
      - service
      - containers

  service:
    type: object
    properties:
      name:
        type: string
        description: The name of the service
        minLength: 1
        x-nullable: false
      type:
        type: string
        description: The service type
        x-nullable: false
        # TODO: needs to be configurable
        enum:
          - ClusterIP
          - ExternalName
          - LoadBalancer
      ports:
        type: array
        items:
          $ref: "#/definitions/servicePort"
    required:
      - name
      - type
      - ports

  servicePort:
    type: object
    properties:
      name:
        type: string
        description: The name of this port within the service
        minLength: 1
        x-nullable: false
      port:
        type: integer
        description: The port that will be exposed by this service
        x-nullable: false
      protocol:
        type: string
        description: The IP protocol for this port. Supports "TCP" and "UDP". Default is TCP
        minLength: 1
        x-nullable: false
        default: TCP
        enum:
          - TCP
          - UDP
      targetPort:
        type: integer
        description: Number or name of the port to access on the pods targeted by the service
        x-nullable: false
    required:
      - name
      - port

  container:
    type: object
    properties:
      name:
        type: string
        description: The name of this container within the service
        minLength: 1
        x-nullable: false
      image:
        type: string
        description: The docker image name for the container
        minLength: 1
        x-nullable: false
      imageTag:
        type: string
        description: The docker image tag for the container
        minLength: 1
        x-nullable: false
      imagePullPolicy:
        type: string
        description: Image pull policy. One of Always or IfNotPresent.
        minLength: 1
        x-nullable: false
        default: IfNotPresent
        enum:
          - Always
          - IfNotPresent
      command:
        type: string
        description: The command to run for the docker image's entrypoint.
        # minLength: 1
        x-nullable: true
      portNames:
        type: array
        items:
          type: string
      volumes:
        type: array
        items:
          $ref: "#/definitions/volumeMount"
    required:
      - name
      - image
      - imageTag
      - imagePullPolicy
      - portNames

  volumeMount:
    type: object
    properties:
      name:
        type: string
        description: The name of the volume to mount
        minLength: 1
        x-nullable: false
      type:
        type: string
        description: The type of the volume mount (ConfigMap, PersistentVolume, or Secret)
        minLength: 1
        x-nullable: false
        enum:
          - ConfigMap
          - PersistentVolume
          - Secret
      mountPath:
        type: string
        description: Path within the container at which the volume should be mounted
        minLength: 1
        x-nullable: false
      subPath:
        type: string
        description: Path within the volume from which the container's volume should be mounted
        default: ""
        x-nullable: true
      readOnly:
        type: boolean
        description: Mounted read-only if true, read-write otherwise
        default: false
        x-nullable: false

  ingress:
    type: object
    properties:
      host:
        type: string
        description: The hostname for the ingress
        minLength: 1
        x-nullable: false
      paths:
        type: array
        items:
          $ref: "#/definitions/ingressPath"
    required:
      - host
      - paths

  ingressPath:
    type: object
    properties:
      path:
        type: string
        description: Path is matched against the path of an incoming request
        minLength: 1
        default: "/"
        x-nullable: false
      portName:
        type: string
        description: Specifies the port name of the service to expose
        minLength: 1
        x-nullable: false
    required:
      - path
      - portName

  configMap:
    type: object
    properties:
      name:
        type: string
        description: The name of the ConfigMap
        minLength: 1
        x-nullable: false
      # TODO: this should be kvps instead of hardcorded data kvp
      data:
        type: string
        description: The content of the ConfigMap data key
        minLength: 1
        x-nullable: false
    required:
      - name

  persistentVolume:
    type: object
    properties:
      name:
        type: string
        description: The name of the volume
        minLength: 1
        x-nullable: false
      accessMode:
        type: string
        description: The desired access mode for the volume
        minLength: 1
        x-nullable: false
        default: ReadWriteOnce
        enum:
          - ReadWriteOnce
          - ReadOnlyMany
          - ReadWriteMany
      capacity:
        type: integer
        description: The desired size of the volume in GB
        format: int64
        x-nullable: false
      storageClassName:
        type: string
        description: The desired storage class for the volume
        minLength: 1
        x-nullable: false
        default: SSD
        enum:
          - SSD
          - NFS
    required:
      - name
      - accessMode
      - capacity
      - storageClassName

  healthStatus:
    type: object
    properties:
      status:
        type: string

  validationResponse:
    type: object
    properties:
      errors:
        type: object
        additionalProperties:
          type: object

  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
        minLength: 1
        x-nullable: false
